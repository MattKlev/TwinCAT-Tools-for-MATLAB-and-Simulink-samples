
// ****************** FbBoolCounter.cpp *************************
// Generated by TE140x-TargetForMatlabSimulink  2.8.21.0
// MATLAB 23.2.0.2409890 (R2023b) Update 3 (win64)
// TwinCAT 3.1.4024.0
// TwinCAT Target 2.8.21.0
// Beckhoff Automation GmbH & Co. KG     (www.beckhoff.com)
// *************************************************************

#include "TcPch.h"
#pragma hdrstop

#include "FbBoolCounter.h"

#ifdef EXT_MODE
#include "TcExtWork.h"
#endif

#include "count_true_booleans_initialize.h"
#include "count_true_booleans.h"
#include "count_true_booleans_terminate.h"

#include "ObjClassFactory.h"
using namespace TcMgSdk;

///////////////////////////////////////////////////////////////////////////////
// Definitions
///////////////////////////////////////////////////////////////////////////////
#if TC_BUILD<=4024
DEFINE_THIS_FILE()
#endif

///////////////////////////////////////////////////////////////////////////////
// CFbBoolCounter specific globals
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// CFbBoolCounter static members
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// CFbBoolCounter implementation
///////////////////////////////////////////////////////////////////////////////
CFbBoolCounter::CFbBoolCounter()
{
	m_TraceLevelMax = tlInfo;
	GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Init) = FpExcptCtrlSet::Prec53_CallerExceptions;
	GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Update) = FpExcptCtrlSet::Prec53_CallerExceptions;


	
}

CFbBoolCounter::~CFbBoolCounter()
{

}

bool CFbBoolCounter::FB_Main()
{

	HRESULT hr = S_OK;

	if (!m_Execute)
		return false;
	if (!m_Initialized)
		return false;

	if(SUCCEEDED(hr))
	{
		memset(&m_ActException, 0, sizeof(m_ActException));
		auto fpCtrl = FpControl(FpCtrlSection::Update);
		TcTry
		{
			if (hr == S_OK)
			{
				count = ::count_true_booleans(*((coder::array<boolean_T,2>*)boolArray));
			}

		}
		TcExcept(ExceptionFilter(GetExceptionInformation()))
		{
			ExceptionHandler();
		}
		FpRestore(fpCtrl);
	}


	m_HResult = hr;
	return SUCCEEDED(hr);
}

void CFbBoolCounter::_FB_Main(ST_FB_BoolCounter_FB_Main* ST_Param)
{
	ST_Param->result = ((CFbBoolCounter*)ST_Param->pInst)->FB_Main(  );
}

bool CFbBoolCounter::FB_exit(bool bInCopyCode)
{

	HRESULT hr = S_OK;

	auto fpCtrl = FpControl(FpCtrlSection::Init);
	::count_true_booleans_terminate();
	if (((coder::array<boolean_T,2>*)boolArray)!=NULL)
	{
		delete ((coder::array<boolean_T,2>*)boolArray);
		boolArray = NULL;
	}

	FpRestore(fpCtrl);


	SingleInstanceRelease();
	__super::Exit(bInCopyCode);

	m_HResult = hr;
	return SUCCEEDED(hr);
}

void CFbBoolCounter::_FB_exit(ST_FB_BoolCounter_FB_exit* ST_Param)
{
	ST_Param->result = ((CFbBoolCounter*)ST_Param->pInst)->FB_exit( ST_Param->bInCopyCode );
}

bool CFbBoolCounter::FB_init(bool bInitRetains, bool bInCopyCode)
{

	HRESULT hr = S_OK;

	if(SUCCEEDED(hr))
	{
		m_pData = nullptr;
		hr = __super::Init(0,TC_BUILD_MIN,bInitRetains,bInCopyCode);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "Initialization of base class TcMatSim::GeneratedFb failed");
	}
	
	if(SUCCEEDED(hr))
	{
		boolArray = new coder::array<boolean_T,2>();
		memset(&(count),0,sizeof(count));

	m_TraceLevelMax = tlInfo;
	GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Init) = FpExcptCtrlSet::Prec53_CallerExceptions;
	GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Update) = FpExcptCtrlSet::Prec53_CallerExceptions;


	}

	if (SUCCEEDED(hr))
	{
		hr = SingleInstanceLock(GUID_NULL);
		if (FAILED(hr))
			Log(TcTraceLevel::tlError, "SingleInstanceLock() did not succeed");
	}
	
	if (SUCCEEDED(hr))
	{
		auto fpCtrl = FpControl(FpCtrlSection::Init);
		TcTry
		{
		::count_true_booleans_initialize();

		}
		TcExcept(ExceptionFilter(GetExceptionInformation(),FpCtrlSection::Init))
		{
			Log(TcTraceLevel::tlError, "Model initialization failed with an exception.");
			hr = E_FAIL;
		}
		FpRestore(fpCtrl);
	}
	
	if (SUCCEEDED(hr))
		hr = DataExchangeSetState(TCOM_STATE_OP,true);
	
	if (SUCCEEDED(hr))
	{
		m_Initialized = true;
		m_Execute = true;
	}
	else
	{
		m_Initialized = false;
		m_Execute = false;
	}

	m_HResult = hr;
	return SUCCEEDED(hr);
}

void CFbBoolCounter::_FB_init(ST_FB_BoolCounter_FB_init* ST_Param)
{
	ST_Param->result = ((CFbBoolCounter*)ST_Param->pInst)->FB_init( ST_Param->bInitRetains, ST_Param->bInCopyCode );
}

HRESULT CFbBoolCounter::GetnHResult(HRESULT& nParam)
{
	nParam = m_HResult;
	return S_OK;
}

void CFbBoolCounter::_GetnHResult(ST_GetSet_HRESULT* ST_Param)
{
	((CFbBoolCounter*)ST_Param->pInst)->GetnHResult( ST_Param->nParam );
}

HRESULT CFbBoolCounter::GeteInitExceptionHandling(TcMgSdk::FpExcptCtrlSet& eParam)
{
	eParam = GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Init);
	return S_OK;
}

void CFbBoolCounter::_GeteInitExceptionHandling(ST_GetSet_E_FpExcptCtrlSetEx* ST_Param)
{
	((CFbBoolCounter*)ST_Param->pInst)->GeteInitExceptionHandling( ST_Param->eParam );
}

HRESULT CFbBoolCounter::SeteInitExceptionHandling(TcMgSdk::FpExcptCtrlSet eParam)
{
	GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Init) = eParam;
	return S_OK;
}

void CFbBoolCounter::_SeteInitExceptionHandling(ST_GetSet_E_FpExcptCtrlSetEx* ST_Param)
{
	((CFbBoolCounter*)ST_Param->pInst)->SeteInitExceptionHandling( ST_Param->eParam );
}

HRESULT CFbBoolCounter::GeteUpdateExceptionHandling(TcMgSdk::FpExcptCtrlSet& eParam)
{
	eParam = GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Update);
	return S_OK;
}

void CFbBoolCounter::_GeteUpdateExceptionHandling(ST_GetSet_E_FpExcptCtrlSetEx* ST_Param)
{
	((CFbBoolCounter*)ST_Param->pInst)->GeteUpdateExceptionHandling( ST_Param->eParam );
}

HRESULT CFbBoolCounter::SeteUpdateExceptionHandling(TcMgSdk::FpExcptCtrlSet eParam)
{
	GetFpExceptCtrlSet(TcMgSdk::FpCtrlSection::Update) = eParam;
	return S_OK;
}

void CFbBoolCounter::_SeteUpdateExceptionHandling(ST_GetSet_E_FpExcptCtrlSetEx* ST_Param)
{
	((CFbBoolCounter*)ST_Param->pInst)->SeteUpdateExceptionHandling( ST_Param->eParam );
}

HRESULT CFbBoolCounter::GetnExceptionCnt(ULONGLONG& nParam)
{
	nParam = m_ExceptionCnt;
	return S_OK;
}

void CFbBoolCounter::_GetnExceptionCnt(ST_GetSet_ULINT* ST_Param)
{
	((CFbBoolCounter*)ST_Param->pInst)->GetnExceptionCnt( ST_Param->nParam );
}

HRESULT CFbBoolCounter::GetstActiveException(TcMgSdk::ExceptionInfo& stParam)
{
	stParam = m_ActException;
	return S_OK;
}

void CFbBoolCounter::_GetstActiveException(ST_GetSet_ST_ExceptionInfo* ST_Param)
{
	((CFbBoolCounter*)ST_Param->pInst)->GetstActiveException( ST_Param->stParam );
}

HRESULT CFbBoolCounter::GetbInitialized(bool& bParam)
{
	bParam = m_Initialized;
	return S_OK;
}

void CFbBoolCounter::_GetbInitialized(ST_GetSet_BOOL* ST_Param)
{
	((CFbBoolCounter*)ST_Param->pInst)->GetbInitialized( ST_Param->bParam );
}

HRESULT CFbBoolCounter::GetbExecute(bool& bParam)
{
	bParam = m_Execute;
	return S_OK;
}

void CFbBoolCounter::_GetbExecute(ST_GetSet_BOOL* ST_Param)
{
	((CFbBoolCounter*)ST_Param->pInst)->GetbExecute( ST_Param->bParam );
}

HRESULT CFbBoolCounter::SetbExecute(bool bParam)
{
	m_Execute = bParam;
	return S_OK;
}

void CFbBoolCounter::_SetbExecute(ST_GetSet_BOOL* ST_Param)
{
	((CFbBoolCounter*)ST_Param->pInst)->SetbExecute( ST_Param->bParam );
}

HRESULT CFbBoolCounter::put_boolArray(bool* data, LONG size1, LONG size2)
{
	HRESULT hr(S_OK);
	hr = TcMatSim::DataConversion::ToCoderArray(*((coder::array<boolean_T,2>*)boolArray),data,size1,size2);
	return hr;
}

void CFbBoolCounter::_put_boolArray(ST_FB_BoolCounter_put_boolArray* ST_Param)
{
	ST_Param->result = ((CFbBoolCounter*)ST_Param->pInst)->put_boolArray( ST_Param->data, ST_Param->size1, ST_Param->size2 );
}

HRESULT CFbBoolCounter::get_boolArray(bool* data, LONG& size1, LONG& size2)
{
	HRESULT hr(S_OK);
	hr = TcMatSim::DataConversion::FromCoderArray(*((coder::array<boolean_T,2>*)boolArray),data,size1,size2);
	return hr;
}

void CFbBoolCounter::_get_boolArray(ST_FB_BoolCounter_get_boolArray* ST_Param)
{
	ST_Param->result = ((CFbBoolCounter*)ST_Param->pInst)->get_boolArray( ST_Param->data, ST_Param->size1, ST_Param->size2 );
}




BEGIN_FUNC_MAP_FB(CFbBoolCounter)
	FUNC_ENTRY_LIB(VID_Tc3_BoolCounter, CID_FB_BOOLCOUNTER , "FB_BoolCounter" "__main", CFbBoolCounter::_FB_Main)
	FUNC_METHOD_ENTRY_LIB(VID_Tc3_BoolCounter,CID_FB_BOOLCOUNTER , "FB_EXIT", "FB_BoolCounter" "__FB_exit", CFbBoolCounter::_FB_exit)
	FUNC_METHOD_ENTRY_LIB(VID_Tc3_BoolCounter,CID_FB_BOOLCOUNTER , "FB_INIT", "FB_BoolCounter" "__FB_init", CFbBoolCounter::_FB_init)
	FUNC_METHOD_ENTRY_LIB(VID_Tc3_BoolCounter,CID_FB_BOOLCOUNTER , "GETNHRESULT", "FB_BoolCounter" "__GetnHResult", CFbBoolCounter::_GetnHResult)
	FUNC_METHOD_ENTRY_LIB(VID_Tc3_BoolCounter,CID_FB_BOOLCOUNTER , "GETEINITEXCEPTIONHANDLING", "FB_BoolCounter" "__GeteInitExceptionHandling", CFbBoolCounter::_GeteInitExceptionHandling)
	FUNC_METHOD_ENTRY_LIB(VID_Tc3_BoolCounter,CID_FB_BOOLCOUNTER , "SETEINITEXCEPTIONHANDLING", "FB_BoolCounter" "__SeteInitExceptionHandling", CFbBoolCounter::_SeteInitExceptionHandling)
	FUNC_METHOD_ENTRY_LIB(VID_Tc3_BoolCounter,CID_FB_BOOLCOUNTER , "GETEUPDATEEXCEPTIONHANDLING", "FB_BoolCounter" "__GeteUpdateExceptionHandling", CFbBoolCounter::_GeteUpdateExceptionHandling)
	FUNC_METHOD_ENTRY_LIB(VID_Tc3_BoolCounter,CID_FB_BOOLCOUNTER , "SETEUPDATEEXCEPTIONHANDLING", "FB_BoolCounter" "__SeteUpdateExceptionHandling", CFbBoolCounter::_SeteUpdateExceptionHandling)
	FUNC_METHOD_ENTRY_LIB(VID_Tc3_BoolCounter,CID_FB_BOOLCOUNTER , "GETNEXCEPTIONCNT", "FB_BoolCounter" "__GetnExceptionCnt", CFbBoolCounter::_GetnExceptionCnt)
	FUNC_METHOD_ENTRY_LIB(VID_Tc3_BoolCounter,CID_FB_BOOLCOUNTER , "GETSTACTIVEEXCEPTION", "FB_BoolCounter" "__GetstActiveException", CFbBoolCounter::_GetstActiveException)
	FUNC_METHOD_ENTRY_LIB(VID_Tc3_BoolCounter,CID_FB_BOOLCOUNTER , "GETBINITIALIZED", "FB_BoolCounter" "__GetbInitialized", CFbBoolCounter::_GetbInitialized)
	FUNC_METHOD_ENTRY_LIB(VID_Tc3_BoolCounter,CID_FB_BOOLCOUNTER , "GETBEXECUTE", "FB_BoolCounter" "__GetbExecute", CFbBoolCounter::_GetbExecute)
	FUNC_METHOD_ENTRY_LIB(VID_Tc3_BoolCounter,CID_FB_BOOLCOUNTER , "SETBEXECUTE", "FB_BoolCounter" "__SetbExecute", CFbBoolCounter::_SetbExecute)
	FUNC_METHOD_ENTRY_LIB(VID_Tc3_BoolCounter,CID_FB_BOOLCOUNTER , "PUT_BOOLARRAY", "FB_BoolCounter" "__put_boolArray", CFbBoolCounter::_put_boolArray)
	FUNC_METHOD_ENTRY_LIB(VID_Tc3_BoolCounter,CID_FB_BOOLCOUNTER , "GET_BOOLARRAY", "FB_BoolCounter" "__get_boolArray", CFbBoolCounter::_get_boolArray)
END_FUNC_MAP_FB()

DECLARE_FUNCMAP_CREATOR(HandleFuncMap_CFbBoolCounter)
{
	return CFbBoolCounter::TcHandleFuncMap(mode, idx, idxcounter, pFncId, pipFnc, ppMethod, ppName, pSignature, pVersion);
}
