// ****************** TcComcount_and_invert_booleans.h *************************
// Generated by TE140x-TargetForMatlabSimulink  2.8.21.0
// MATLAB 23.2.0.2409890 (R2023b) Update 3 (win64)
// TwinCAT 3.1.4024.0
// TwinCAT Target 2.8.21.0
// Beckhoff Automation GmbH & Co. KG     (www.beckhoff.com)
// *************************************************************
#ifndef _TcComcount_and_invert_booleans__h_INCLUDED
#define _TcComcount_and_invert_booleans__h_INCLUDED


#include "TcInterfaces.h"
#include "TcIoInterfaces.h"
#include "TcGeneratedTcCom.h"
#include "TcMatSimTcCom.h"
#include "count_and_invert_booleansInternal.h"

#include "Tc3_BoolCounterInterfaces.h"
#include "Tc3_BoolCounterVersion.h"


class CTcComcount_and_invert_booleans :
	public TcMatSim::GeneratedTcCom,
	public ITcWatchSource,
	public ITcCyclic,
	public ITcPostCyclic,
	public ITcADI,
	public ITccount_and_invert_booleans
{
public:
	DECLARE_IUNKNOWN_DERIVED()
	DECLARE_ITCOMOBJECT_SETSTATE()
	DECLARE_ITCWATCHSOURCE()
	DECLARE_OBJDATAAREA_MAP()
	DECLARE_OBJPARAWATCH_MAP()
	DECLARE_PARA()
	DECLARE_ITCADI()
	DECLARE_IPERSIST_LIB()
	DECLARE_OBJPARAASYNC()


	// Constructor
	CTcComcount_and_invert_booleans();

	// Destructor
	~CTcComcount_and_invert_booleans();

	HRESULT TCOMAPI CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context);
	HRESULT TCOMAPI PostCyclicUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context);
	HRESULT Update(ITcTask* ipTask, ULONG_PTR context);
	TcMgSdk::ModuleInfo& GetModuleInfo();
	HRESULT CheckAndAdaptCycleTimes();

	// ITccount_and_invert_booleans
	HRESULT TCOMAPI count_and_invert_booleans(double& count);
	HRESULT TCOMAPI put_boolArray(bool* data, LONG size1, LONG size2);
	HRESULT TCOMAPI get_boolArray(bool* data, LONG& size1, LONG& size2);
	HRESULT TCOMAPI put_inverseArray(double* data, LONG size1, LONG size2);
	HRESULT TCOMAPI get_inverseArray(double* data, LONG& size1, LONG& size2);
	HRESULT TCOMAPI get_inverseArray_(double* data, LONG& size1, LONG& size2);



	coder::array<boolean_T,2> boolArray;
	count_and_invert_booleans_Outports Outports;
	coder::array<real_T,2> inverseArray;
	static TcMatSim_ModuleGeneratorInfo m_ModuleGeneratorInfo;



};
			

#endif // _TcComcount_and_invert_booleans__h_INCLUDED